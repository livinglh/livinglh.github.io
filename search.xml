<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring基本使用</title>
      <link href="/2019/12/12/spring-ji-ben-shi-yong/"/>
      <url>/2019/12/12/spring-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Sring是什么？"><a href="#1-Sring是什么？" class="headerlink" title="1. Sring是什么？"></a>1. Sring是什么？</h1><p>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</p><h1 id="2-Spring的优势："><a href="#2-Spring的优势：" class="headerlink" title="2. Spring的优势："></a>2. Spring的优势：</h1><ol><li><p>方便解耦，简化开发</p></li><li><p>AOP编程的支持</p></li><li><p>声明式事务的支持</p></li><li><p>方便程序的测试</p></li><li><p>方便集成各种优秀的框架</p></li><li><p>降低 JavaEE API的使用难度</p><ul><li><p>什么是程序的耦合？</p><ul><li><p>程序间的依赖关系</p><ul><li>类之间的依赖</li><li>方法间的依赖</li></ul></li><li><p>解耦</p><ul><li>降低程序间的依赖关系</li></ul></li><li><p>实际开发中</p><ul><li>编译期不依赖，运行时才依赖</li></ul></li><li><p>解耦的思路：</p><ol><li>使用反射来创建对象，而避免使用new关键字</li><li>通过读取配置文件来获取要创建的对象全限定类名</li></ol></li><li><p>Bean: 在计算机英语中，有可重用组件的含义</p></li><li><p>JavaBean: 用java语言编写的可重用组件   javabean&gt;实体类</p></li><li><p>一个创建Bean对象的工厂： 创建service和dao对象</p><ol><li>需要一个配置文件配置service和dao  （xml或者properties）<ul><li>配置内容：唯一标识=全限定类名（key=value）</li></ul></li><li>通过读取配置文件中的配置内容，反射创建对象</li></ol></li><li><p>IOC（Inverse Of Control：控制反转）</p><ul><li>把创建对象的权利交给框架，是框架的重要特征</li><li>作用：削减程序间的耦合<h1 id="3-使用spring的IOC解决程序耦合"><a href="#3-使用spring的IOC解决程序耦合" class="headerlink" title="3. 使用spring的IOC解决程序耦合"></a>3. 使用spring的IOC解决程序耦合</h1></li></ul></li></ul></li></ul></li><li><p>在maven工程的配置文件中导入spring依赖</p></li><li><p>在资源根目录下创建xml文件</p></li><li><p>让spring管理资源，在xml配置文件中配置service和dao</p></li><li><p>测试使用：</p><ol><li><p>获取核心容器容器<br><code>ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</code></p></li><li><p>根据 bean 的 id 获取对象</p><pre><code> IAccountService aService = (IAccountService) ac.getBean("accountService"); IAccountService aService = ac.getBean("accountService",IAccountDao.class); System.out.println(aService); IAccountDao aDao = (IAccountDao) ac.getBean("accountDao"); System.out.println(aDao);</code></pre></li><li><p>执行所需执行的方法</p><ul><li>ApplicationContext的三个常用实现类<ul><li>ClassPathXmlApplicationContext：<ul><li>从类的根路径下加载配置文件</li></ul></li><li>FileSystemXmlApplicationContext：<ul><li>从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置</li></ul></li><li>AnnotationConfigApplicationContext:<ul><li>使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解</li></ul></li></ul></li><li>核心容器的两个接口引发出的问题<ul><li>BeanFactory：单列对象适用 （常用）<ul><li>创建对象采取的策略是延迟加载的方式。什么使用什么时候创建对象。（</li></ul></li><li>ApplicationContext：多例对象适用<ul><li>创建对象采取的策略是立即加载的方式。只要一读取配置文件，默认情况下马上就会创建配置文件中配置的对象。<h1 id="4-spring对Bean的管理细节"><a href="#4-spring对Bean的管理细节" class="headerlink" title="4. spring对Bean的管理细节"></a>4. spring对Bean的管理细节</h1></li></ul></li></ul></li></ul></li></ol></li><li><p>bean 标签</p><ul><li>作用：用于配置对象让 spring 来创建的。默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</li><li>属性：<ul><li>id： 给对象在容器中提供一个唯一标识。用于获取对象。</li><li>class： 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</li><li>scope： 指定对象的作用范围。</li><li>init-method： 指定类中的初始化方法名称。</li><li>destroy-method： 指定类中销毁方法名称。</li></ul></li></ul></li><li><p>创建Bean的三种方式（sping配置文件中）</p><ol><li><p>使用默认构造函数创建</p><ul><li>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时 </li><li>它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败<br><code>&lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"/&gt;</code></li></ul></li><li><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><ul><li><p>先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法</p></li><li><p>factory-bean 属性：用于指定实例工厂 bean 的 id。</p></li><li><p>factory-method 属性：用于指定实例工厂中创建对象的方法。</p><pre><code>  InstanceFactory.java  /**  * 模拟一个实例工厂，创建业务层实现类  * 此工厂创建对象，必须现有工厂实例对象，再调用方法  */  public class InstanceFactory {  public IAccountService createAccountService(){  return new AccountServiceImpl();  }  }</code></pre></li></ul></li></ol></li></ol><pre><code>            spring xml配置文件            &lt;bean id="instancFactory" class="com.it.factory.InstanceFactory"&gt;&lt;/bean&gt;            &lt;bean id="accountService"            factory-bean="instancFactory"            factory-method="createAccountService"&gt;&lt;/bean&gt;3. 使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）    - 先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法    - factory-bean 属性：用于指定实例工厂 bean 的 id。    - factory-method 属性：用于指定实例工厂中创建对象的方法。            StaticFactory.java            /**            * 模拟一个实例工厂，创建业务层实现类            * 此工厂创建对象，必须现有工厂实例对象，再调用方法            */            public class StaticFactory {            public static IAccountService createAccountService(){            return new AccountServiceImpl();            }            }            spring xml配置文件            &lt;bean id="accountService" class="com.it.factory.StaticFactory"             factory-method="createAccountService"&gt;&lt;/bean&gt;</code></pre><ol start="3"><li><p>bean的作用范围：</p><ol><li>bean标签的scope属性：<ul><li>singleton：单例值（默认值） 一个应用只有一个对象的实例。它的作用范围就是整个引用</li><li>prototype：多例的 每次访问对象时，都会重新创建对象实例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li></ul></li></ol></li><li><p>bean对象的生命周期：</p><ol><li>单例对象： scope=”singleton”<ul><li>一个应用只有一个对象的实例。它的作用范围就是整个引用。</li><li>生命周期：<ul><li>对象出生：当应用加载，创建容器时，对象就被创建了。</li><li>对象活着：只要容器在，对象一直活着。</li><li>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</li></ul></li></ul></li><li>多例对象： scope=”prototype”<ul><li>每次访问对象时，都会重新创建对象实例。</li><li>生命周期：<ul><li>对象出生：当使用对象时，创建新的对象实例。</li><li>对象活着：只要对象在使用中，就一直活着。</li><li>对象死亡：当对象长时间不用时，且没有被别的对象引用时，被java的垃圾回收器回收了。<h1 id="5-spring中的依赖注入（Dependency-Injectio-n"><a href="#5-spring中的依赖注入（Dependency-Injectio-n" class="headerlink" title="5. spring中的依赖注入（Dependency Injectio #n)"></a>5. spring中的依赖注入（Dependency Injectio #n)</h1></li></ul></li></ul></li></ol></li><li><p>基本概念</p><ul><li>依赖注入： Dependency Injection。 它是 spring 框架核心 ioc 的具体实现。</li><li>我们的程序在编写时，通过控制反转，把对象的创建交给了spring，但是代码中不可能出现没有依赖的情况。ioc解耦只是降低他们的依赖关系，但不会消除。例如：我们的业务层仍会调用持久层的方法。那这种业务层和持久层的依赖关系，在使用 spring 之后，就让spring来维护了。简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</li></ul></li><li><p>依赖关系的管理：交给spring来维护。当当前类需要用到其他类的对象时，由spring为我们提供，我们只需要在配置文件中说明</p></li><li><p>依赖关系的维护就称之为依赖注入</p></li><li><p>依赖注入能注入的数据：（三类）</p><ol><li>基本类型和String</li><li>其他bean类型（配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ol></li><li><p>依赖注入的方式（三种）</p><ol><li><p>使用构造函数提供</p><ul><li><p>使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让spring框架来为我们注入</p><pre><code>  &lt;!-- 使用构造函数的方式，给 service 中的属性传值  要求：      类中需要提供一个对应参数列表的构造函数。  涉及的标签：      constructor-arg  属性：      index:指定参数在构造函数参数列表的索引位置      type:指定参数在构造函数中的数据类型      name:指定参数在构造函数中的名称 用这个找给谁赋值      =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============      value:它能赋的值是基本数据类型和String类型      ref:它能赋的值是其他 bean 类型，也就是说，必须得是在spring配置文件中配置过的 bean  优势：获取bean对象时，注入数据是必须的操作，否则对象无法创建成功  弊端：改变了bean对象的实例化方式，使在创建对象时，如果用不到这些数据，也必须提供  --&gt;  &lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"&gt;      &lt;constructor-arg name="name" value="张三"&gt;&lt;/constructor-arg&gt;      &lt;constructor-arg name="age" value="18"&gt;&lt;/constructor-arg&gt;      &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;  &lt;/bean&gt;  &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</code></pre></li></ul></li><li><p>使用set方法提供（实际开发中，此种方式用的较多）</p><ul><li><p>在类中提供需要注入成员的 set 方法。</p><pre><code>  &lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式  涉及的标签：      property  属性：      name：找的是类中 set 方法后面的部分      ref：给属性赋值是其他 bean 类型的      value：给属性赋值是基本数据类型和 string 类型的  优势：创建对象时，没有明确的限制，可以直接使用默认构造函数  弊端：如果有某个成员必须有值，则获取对象是有可能set方法没有执行  --&gt;  &lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"&gt;      &lt;property name="name" value="test"&gt;&lt;/property&gt;      &lt;property name="age" value="21"&gt;&lt;/property&gt;      &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</code></pre></li><li><p>集合类型数据的注入（只能使用构造函数和set方式两种方法）</p><ul><li>set方法<!-- 注入集合数据  List 结构的：  array,list,set  Map 结构的  map,entry,props,prop  -->  <bean id="accountService" class="com.it.service.impl.AccountServiceImpl">  <!-- 在注入集合数据时，只要结构相同，标签可以互换 -->  <!-- 给数组注入数据 -->  <property name="myStrs">  <set>  <value>AAA</value>  <value>BBB</value>  <value>CCC</value>  </set>  </property>  <!-- 注入 list 集合数据 -->  <property name="myList">  <array>  <value>AAA</value>  <value>BBB</value>  <value>CCC</value>  </array>  </property>  <!-- 注入 set 集合数据 -->  <property name="mySet">  <list>  <value>AAA</value>  <value>BBB</value>  <value>CCC</value>  </list>  </property>  <!-- 注入 Map 数据 -->  <property name="myMap">  <props>  <prop key="testA">aaa</prop>  <prop key="testB">bbb</prop>  </props>  </property>  <!-- 注入 properties 数据 -->  <property name="myProps">  <map>  <entry key="testA" value="aaa"></entry>  <entry key="testB">  <value>bbb</value>  </entry>  </map>  </property>      </bean></li></ul></li></ul></li></ol></li></ol><pre><code>3. 使用注解提供</code></pre><h1 id="6-基于注解的IOC配置"><a href="#6-基于注解的IOC配置" class="headerlink" title="6. 基于注解的IOC配置"></a>6. 基于注解的IOC配置</h1><ol><li><p>环境：</p><ul><li><p>创建spring的xml配置文件并开启对注解的支持</p><ul><li><p>注意：基于注解整合时，导入约束时需要多导入一个 context 名称空间下的约束 </p><pre><code>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;beans xmlns="http://www.springframework.org/schema/beans"  xmlns:context="http://www.springframework.org/schema/context"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"&gt;  &lt;!-- 告知 spring 创建容器时要扫描的包  --&gt;  &lt;context:component-scan base-package="com.it"&gt;&lt;/context:component-scan&gt;  &lt;!-- 配置 dbAssit --&gt;  &lt;bean id="dbAssit" class="com.it.dbassit.DBAssit"&gt;  &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;!-- 配置数据源 --&gt;  &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;  &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;  &lt;property name="jdbcUrl" value="jdbc:mysql:///spring_day02"&gt;&lt;/property&gt;  &lt;property name="user" value="root"&gt;&lt;/property&gt;  &lt;property name="password" value="1234"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;/beans&gt;</code></pre></li></ul></li></ul></li><li><p>常用的IOC注解按照作用分类</p><ul><li>用于创建对象的<ul><li>类似于xml配置文件中的<bean>标签</bean></li><li>@Component：<ul><li>作用：用于把当前类对象存入spring容器中</li><li>属性：value：用于指定bean的id，当我们不写时，它的默认值是当前类名，且首字母小写</li></ul></li><li>@Controller：一般用在表现层</li><li>@Service：一般用在业务层</li><li>@Repository：一般用在持久层</li><li>以上三个注解的作用和属性和@Component是一模一样的。</li><li>它们三个是spring框架为我们提供明确的三层使用的注解，使三层架构对象更为清晰</li></ul></li><li>用于注入数据的<ul><li>类似于xml配置文件中<bean>标签中的<property></property></bean></li><li>@Autowired:<ul><li>作用：自动按照类型注入。<ul><li>只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可注入成功。</li><li>若IOC容器中没有匹配到，则报错</li><li>若IOC容器中有多个类型匹配时，可能会报错</li></ul></li><li>位置：变量，方法上</li></ul></li><li>@Qualifier：<ul><li>作用：在自动按照类型注入的基础之上，再按照 Bean的id 注入。它在给类成员注入时不能独立使用，必须和@Autowire 一起使用；但是给方法参数注入时，可以独立使用。</li></ul></li><li>Resource：<ul><li>作用：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型</li><li>属性：    name：指定 bean 的 id。</li></ul></li><li>注意： 以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现，另外，集合类型的注入只能通过xml来实现</li><li>@Value<ul><li>作用：注入基本数据类型和string类型数据</li><li>属性：value：用于指定数据的值。它可以使用spring中的SpEL（也就是spring中的el表达式）</li></ul></li></ul></li><li>用于改变作用范围的<ul><li>类似于xml配置文件中<bean>标签中的<scope></scope></bean></li><li>@Scope<ul><li>作用：指定 bean 的作用范围。</li><li>属性：value：指定范围的值。取值： singleton prototype request session globalsession</li></ul></li></ul></li><li>和生命周期相关的<ul><li>类似于xml配置文件中<bean>标签中的init-method和destroy-methode的作用是一样的</bean></li><li>@PostConstruct<ul><li>作用：用于指定初始化方法。</li></ul></li><li>@PreDestroy<ul><li>作用：用于指定销毁方法。</li></ul></li></ul></li></ul></li><li><p>spring的新注解（使spring脱离xml配置文件）</p><ul><li>@Configuration<ul><li>作用：用于指定当前类是一个 spring 配置类， 当创建容器时会从该类上加载注解。 获取容器时需要使用AnnotationApplicationContext(有@Configuration 注解的类.class)。</li><li>属性：value:用于指定配置类的字节码</li><li>当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</li></ul></li><li>@ComponentScan<ul><li>作用：用于指定 spring 在初始化容器时要扫描的包。 作用和在 spring 的 xml 配置文件中的：&lt;context:component-scan base-package=”com.it”/&gt;是一样的。</li><li>属性：basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样。</li></ul></li><li>@Bean<ul><li>作用：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。</li><li>属性：name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）。</li><li>当使用注解配置方法时，如果方法有参数，spring框架回去容器中查找有没有可用的bean对象，查找的方式和Autowired注解的作用是一样的</li></ul></li><li>@Import<ul><li>作用：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration 注解。写上也没问题</li><li>属性：value[]：用于指定其他配置类的字节码。</li><li>有@Import注解的类是父配置类，导入的类都是子配置类</li></ul></li><li>@PropertySource<ul><li>作用：用于加载.properties 文件中的配置。例如配置数据源时，可以把连接数据库的信息写到properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。</li><li>属性：value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:</li></ul></li></ul></li><li><p>注解和xml的选择</p><pre><code>     ![注解和xml的选择](https://i.imgur.com/dFAZVUb.png)</code></pre><h1 id="7-spring整合junit配置"><a href="#7-spring整合junit配置" class="headerlink" title="7. spring整合junit配置"></a>7. spring整合junit配置</h1></li><li><p>导入spring整合junit的jar（坐标）</p></li><li><p>使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的</p><ul><li><p>@Runwith</p><p>  <code>@RunWith(SpringJUnit4ClassRunner.class)</code></p></li></ul></li><li><p>告知spring的运行器，spring的IOC创建是基于XML还是注解的，并说明位置</p><ul><li><p>@ContextConfiguration()</p><ul><li><p>locations 属性： 用于指定配置文件的位置。如果是类路径下，需要用 classpath:表明</p></li><li><p>classes 属性： 用于指定注解的类。当不使用 xml 配置时，需要用此属性指定注解类的位置</p><pre><code>  @RunWith(SpringJUnit4ClassRunner.class)  @ContextConfiguration(locations= {"classpath:bean.xml"})</code></pre></li></ul></li></ul></li></ol><h1 id="Spring中的AOP"><a href="#Spring中的AOP" class="headerlink" title="Spring中的AOP"></a>Spring中的AOP</h1><h2 id="Spring中AOP的一些细节"><a href="#Spring中AOP的一些细节" class="headerlink" title="Spring中AOP的一些细节"></a>Spring中AOP的一些细节</h2><ol><li><p>AOP相关术语：</p><ul><li>Joinpoint(连接点):<br>  所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。</li><li>Pointcut(切入点):<br>  所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li><li>Advice(通知/增强):<br>  所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。<br>  通知的类型： 前置通知,后置通知,异常通知,最终通知,环绕通知。</li><li>Introduction(引介):<br>  引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。</li><li>Target(目标对象):<br>  代理的目标对象。</li><li>Weaving(织入):<br>  是指把增强应用到目标对象来创建新的代理对象的过程。<br>  spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</li><li>Proxy（代理） :<br>  一个类被 AOP 织入增强后，就产生一个结果代理类。</li><li>Aspect(切面):<br>  是切入点和通知（引介）的结合。</li></ul></li><li><p>相关工作</p><ol><li>开发阶段<ul><li>编写核心业务代码（开发主线）</li><li>公用代码抽取，制作成通知</li><li>配置文件中，声明切入点与通知间的关系，即切面</li></ul></li><li>运行阶段<ul><li>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。<h2 id="Spring中基于XML的AOP配置"><a href="#Spring中基于XML的AOP配置" class="headerlink" title="Spring中基于XML的AOP配置"></a>Spring中基于XML的AOP配置</h2></li></ul></li></ol></li><li><p>导入必备的jar包依赖</p></li><li><p>创建spring的约束并导入配置文件  </p><pre><code> &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;/beans&gt;</code></pre></li><li><p>配置spring的ioc</p></li><li><p>抽取公共代码制作成通知类</p></li><li><p>通知类用 bean 标签配置起来</p></li><li><p>使用 aop:config 声明 aop 配置</p></li><li><p>使用 aop:aspect 配置切面</p><ul><li>id： 给切面提供一个唯一标识。</li><li>ref： 引用配置好的通知类 bean 的 id</li></ul></li><li><p>在aop:aspect标签的内部使用对应标签来配置通知的类型</p><ul><li><p>aop:before：表示配置前置通知</p><ul><li>method：用于指定Logger类中哪个方法是前置通知</li><li>pointcut：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</li><li>pointcut-ref: 指定切入点表达式的id</li></ul></li><li><p>切入点表达式写法</p><pre><code>  关键字：execution(表达式)  表达式：      访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)  标准的表达式写法：      public void com.it.service.impl.AccountServiceImpl.saveAccount()  访问修饰符可以省略      void com.it.service.impl.AccountServiceImpl.saveAccount()  返回值可以使用通配符，表示任意返回值      * com.it.service.impl.AccountServiceImpl.saveAccount()  包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.      * *.*.*.*.AccountServiceImpl.saveAccount())  包名可以使用..表示当前包及其子包      * *..AccountServiceImpl.saveAccount()  类名和方法名都可以使用*来实现通配      * *..*.*()  参数列表：      可以直接写数据类型：          基本类型直接写名称           int          引用类型写包名.类名的方式   java.lang.String      可以使用通配符表示任意类型，但是必须有参数      可以使用..表示有无参数均可，有参数可以是任意类型  全通配写法：      * *..*.*(..)  实际开发中切入点表达式的通常写法：      切到业务层实现类下的所有方法          * com.it.service.impl.*.*(..)</code></pre></li></ul></li><li><p>环绕通知</p><ul><li>环绕通知需要有明确的切入点方法调用</li><li>是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式</li><li>Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。</li><li>proceed()方法所需要的参数可以通过该接口的getArgs()方法获得</li></ul></li><li><p>例子</p><pre><code>&lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;&lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"&gt;&lt;/bean&gt;&lt;!-- 配置Logger类（通知类） --&gt;&lt;bean id="logger" class="com.it.utils.Logger"&gt;&lt;/bean&gt;&lt;!--配置AOP--&gt;&lt;aop:config&gt;    &lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容      此标签写在aop:aspect标签内部只能当前切面使用。      它还可以写在aop:aspect外面，此时就变成了所有切面可用      --&gt;    &lt;aop:pointcut id="pt1" expression="execution(* com.it.service.impl.*.*(..))"&gt;&lt;/aop:pointcut&gt;    &lt;!--配置切面 --&gt;    &lt;aop:aspect id="logAdvice" ref="logger"&gt;        &lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;        &lt;!-- 配置前置通知：在切入点方法执行之前执行        &lt;aop:before method="beforePrintLog" pointcut-ref="pt1" &gt;&lt;/aop:before&gt;        &lt;aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"&gt;&lt;/aop:before&gt;--&gt;        &lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个        &lt;aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-returning&gt;--&gt;        &lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个        &lt;aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after-throwing&gt;--&gt;        &lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行        &lt;aop:after method="afterPrintLog" pointcut-ref="pt1"&gt;&lt;/aop:after&gt;--&gt;        &lt;!-- 配置环绕通知 --&gt;        &lt;aop:around method="aroundPringLog" pointcut-ref="pt1"&gt;&lt;/aop:around&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;</code></pre><h2 id="Spring中基于注解的AOP配置"><a href="#Spring中基于注解的AOP配置" class="headerlink" title="Spring中基于注解的AOP配置"></a>Spring中基于注解的AOP配置</h2></li><li><p>配置文件中导入context的名称空间  </p><pre><code> &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;/beans&gt;</code></pre></li><li><p>把相关的资源使用注解配置</p><ol><li><p>通知类使用@Component(Logger)配置</p></li><li><p>通知类上使用@Aspect 注解声明为切面</p></li><li><p>在增强的方法上使用注解配置通知</p><ol><li><p>@Before()</p></li><li><p>@AfterReturning()</p></li><li><p>@AfterThrowing()</p></li><li><p>@After()</p><blockquote><p>属性均为value：用于指定切入点或指定切入点表达式的引用<br>spring中存在对这四个注解的调用顺序的问题，环绕通知没有问题 </p></blockquote></li><li><p>@Around()</p><blockquote><p>注解引用pt表达式</p></blockquote><p> @Pointcut(“execution(* com.itheima.service.impl.<em>.</em>(..))”)<br> private void pt1() {}</p><p> @Around(“pt1()”)</p></li></ol></li></ol></li><li><p>在配置文件中指定spring要扫描的包  </p><pre><code> `&lt;context:component-scan base-package="com.it"&gt;&lt;/context:component-scan&gt;`</code></pre></li><li><p>在 spring 配置文件中开启 spring 对注解 AOP 的支持  </p><pre><code> `&lt;aop:aspectj-autoproxy/&gt;`</code></pre><blockquote><p>不使用xml的配置方式时：  </p></blockquote><pre><code> @Configuration @ComponentScan(basePackages="com.itheima") @EnableAspectJAutoProxy public class SpringConfiguration { }</code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建github博客并绑定域名</title>
      <link href="/2019/12/10/shi-yong-hexo-da-jian-github-bo-ke-bing-bang-ding-yu-ming/"/>
      <url>/2019/12/10/shi-yong-hexo-da-jian-github-bo-ke-bing-bang-ding-yu-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建github个人仓库"><a href="#1-创建github个人仓库" class="headerlink" title="1.创建github个人仓库"></a>1.创建github个人仓库</h1><ol><li><p>登录到GitHub，点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个用户名使用你的GitHub帐号名称代替，固定写法</p><h1 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h1></li><li><p>在Git Bash中设置user.name和user.email配置信息：</p><pre><code> git config --global user.name "你的GitHub用户名" git config --global user.email "你的GitHub注册邮箱"</code></pre></li><li><p>生成ssh密钥文件：</p><p> <code>ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></p></li><li><p>然后直接三个回车即可，默认不需要设置密码</p></li><li><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p></li><li><p>打开GitHub_Settings_keys 页面，新建new SSH Key</p><p> Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p></li><li><p>在Git Bash中检测GitHub公钥设置是否成功</p><p> <code>ssh git@github.com</code></p><p> 这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><ul><li>若设置成功后还是部署时还是需要输入用户名和密码，此时更改站点的配置文件_config.yml，改为<ul><li>repo: <a href="mailto:git@github.com">git@github.com</a>:用户名/用户名.github.io.git</li></ul></li></ul></li></ol><h1 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h1><ol><li>检测npm是否安装成功，在命令行中输入npm -v </li></ol><h1 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h1><ol><li><p>在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p></li><li><p>使用npm命令安装Hexo，输入：</p><p> <code>npm install -g hexo-cli</code></p></li><li><p>安装完成后，初始化博客</p><p> <code>hexo init blog</code></p><p> 这里的命令都是作用在刚刚创建的Blog文件夹中</p></li><li><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><pre><code> hexo new test_my_site      hexo g hexo s</code></pre><p> 完成后，打开浏览器输入网址：<br> localhost:4000</p><p> 执行上述三条语句时可能出现 Usage: hexo <command>问题，此时按顺序输入下列语句后重新运行：</command></p><pre><code> cd xxx/blog 进入到安装目录blog下 npm install</code></pre></li><li><p>网站发布</p><ol><li><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。在blog根目录里的_config.yml文件称为站点配置文件。将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><pre><code> deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git branch: master</code></pre></li><li><p>安装Git部署插件</p><pre><code>`npm install hexo-deployer-git --save`</code></pre></li><li><p>输入命令</p><pre><code> hexo clean  hexo g  hexo d</code></pre></li><li><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，此时你的博客已经上线了，可以在网络上被访问了。打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> </p></li></ol></li></ol><h1 id="5-与域名绑定"><a href="#5-与域名绑定" class="headerlink" title="5. 与域名绑定"></a>5. 与域名绑定</h1><ol><li><p>购买域名</p></li><li><p>添加解析</p><ol><li>解析1<br>记录类型：CNAME<br>主机记录：www<br>记录值： 用户名.github.io</li></ol></li></ol><pre><code>2. 解析2   记录类型：CNAME    主机记录：@    记录值： 用户名.github.io </code></pre><ol start="3"><li><p>github配置</p><ol><li>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</li></ol></li><li><p>本地配置</p><ol><li>进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。保存，命名为CNAME ，注意保存成所有文件而不是txt文件。</li></ol></li><li><p>重新发布</p><p>  hexo clean<br>  hexo g<br>  hexo d</p><ul><li>此时就可以通过自己的域名进入到自己搭建的网站了。</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
