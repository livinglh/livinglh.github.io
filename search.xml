<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git基本使用</title>
      <link href="/2019/12/16/git-ji-ben-shi-yong/"/>
      <url>/2019/12/16/git-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><h3 id="Git与SVN"><a href="#Git与SVN" class="headerlink" title="Git与SVN"></a>Git与SVN</h3><ul><li>Git：  <ul><li>分布式版本控制系统：版本控制放在中央服务器，缺点是联网后大家才能工作</li></ul></li><li>Svn<ul><li>集中式版本控制系统：每个人电脑都是一个版本库，坏一台半台电脑不影响版本控制，安全性高。</li></ul></li></ul><h3 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h3><ol><li><p>从远程仓库中克隆 Git 资源作为本地仓库。</p></li><li><p>从本地仓库中checkout代码然后进行代码修改</p></li><li><p>在提交前先将代码提交到暂存区。</p></li><li><p>提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。</p></li><li><p>在修改完成后，需要和团队成员共享代码时，可以将代码push到远程仓库。</p><p><img src="E:%5CCode%5Clhblog%5Cblog%5Csource_posts%5Cimage%5C1.png" alt="1"></p></li></ol><h3 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h3><ul><li><code>git init</code></li></ul><h3 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h3><ol><li>使用命令<code>git add</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m</code>，完成</li></ol><h2 id="版本控制（回退，撤销，删除）"><a href="#版本控制（回退，撤销，删除）" class="headerlink" title="版本控制（回退，撤销，删除）"></a>版本控制（回退，撤销，删除）</h2><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul><li><p><code>git reset --hard HEAD^</code></p><ul><li>向前回退版本，其中HEAD后面跟几个^就是往回退几个版本</li></ul></li><li><p><code>git reset --hard commit_id</code>。</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li></ul></li><li><p><code>git log</code></p><ul><li>可以查看提交历史，以便确定要回退到哪个版本。</li><li><code>git log --pretty=oneline</code> 合并每条记录到一行</li></ul></li><li><p><code>git reflog</code></p><ul><li>向后恢复某个版本，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本</li></ul></li></ul><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><ul><li><p>工作区：电脑里能看到的目录</p></li><li><p>版本库：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库</p><ul><li>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</li><li>我们把文件往Git版本库里添加的时候，是分两步执行的</li><li><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支</li><li><code>git status</code>查看暂存区状态</li></ul></li><li><p>暂存区状态说明</p><ul><li>如果文件在工作区被编辑，对应的status状态就是 Changes not staged for commit </li><li>如果工作区新增文件，则对应的status状态就是 Untracked files </li><li>如果文件被add后，对应的status状态就是 Changes to be committed </li><li>多次add后的文件都放在暂存区，最后一次性全部提交。提交后的status状态就是 nothing to commit, working tree clean </li><li>这时候工作区就是干净的，暂存区也没有任何内容了。</li></ul></li></ul><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><ul><li><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</p></li><li><p><code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别</p></li></ul><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><ul><li><p><code>git checkout -- file</code>可以丢弃工作区的修改</p><ul><li><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code></p></li><li><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ul></li><li><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p></li></ul></li><li><p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区</p><ul><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD</code>，就回到了场景1，第二步按场景1操作。</li><li><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</li></ul></li><li><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<strong>版本回退</strong></p></li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul><li>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></li><li>删错了，但是版本库里还有，所以可以很轻松地把误删的文件恢复到最新版本<code>git checkout -- test.txt</code><ul><li><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”</li></ul></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><ul><li><p>场景：本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作</p><ol><li><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code></p></li><li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p></li></ol></li></ul><h3 id="从远程克隆库"><a href="#从远程克隆库" class="headerlink" title="从远程克隆库"></a>从远程克隆库</h3><ul><li><code>git clone git@server-name:path/repo-name.git</code><ul><li>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快</li></ul></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><ul><li><p><code>git -b checkout &lt;name&gt;</code></p><ul><li>创建<code>&lt;name&gt;</code>分支，然后切换到<code>&lt;name&gt;</code>分支</li><li>相当于一下两条命令<ul><li><code>git branch &lt;name&gt;</code>：创建新分支</li><li><code>git checkout &lt;name&gt;</code>：切换到目标分支</li></ul></li></ul></li><li><p><code>git branch</code></p><ul><li>查看当前分支</li><li><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号</li></ul></li><li><p><code>git merge &lt;name&gt;</code></p><ul><li>合并指定分支到当前分支<ul><li>若要合并到master分支，首先`git checkout master切换到master分支后使用该命令</li><li>此处为“快速合并”</li></ul></li></ul></li><li><p><code>git branch -d &lt;name&gt;</code></p><ul><li>合并完成，删除分支</li></ul></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ul><li>冲突：当两条分支各自对同一个文件分别有新的提交，此时对这两条分支进行合并时，就有可能会产生冲突</li><li>此时可以通过 git status  查看冲突信息，找到描述中冲突的文件<ul><li>cat file.name 可以显示该文件两个分支的不同<ul><li>其中 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 和  =======  之间是当前分支的最新版，  =======  和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; dev  之间是目标分支内容</li></ul></li><li>进入文件手动修改后删掉这些符号，然后提交</li></ul></li><li>修改完成后即可提交<code>git add</code> <code>git commit -m</code>提交</li><li><code>git log --graph --pretty=oneline --abbrev-commit</code><ul><li>–graph 是图形化，  –pretty=oneline 是一行显示， –abbrev-commit 是只显示每次提交id的前几位</li><li>图形化流程，可以看到分支的合并情况</li></ul></li></ul><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><ul><li>默认情况下，如果情况允许，Git会自动用快进模式合并分支，但这样合并后不会留下分支存在过的痕迹。删除分支后就会丢失相应信息。如果不想这样做，则在合并时加上参数 –no-ff  ，Git则会生成一个提交，所以同时再加上一个提交信息（如果不加则会进入vim模式让编辑提交信息）</li><li><code>git merge --no-ff -m "merge with no-ff" dev</code></li><li>实际开发中的分支策略<ul><li>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活</li><li>团队每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并</li><li>发布时，将把<code>dev</code>分支合并到<code>master</code>上</li></ul></li></ul><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><ul><li>假设正在dev上开发，突然接到修复master上一个bug，就可以用如下命令把现场保存起来</li><li><code>git stash</code><ul><li>可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</li></ul></li><li>这时<code>git status</code>查看工作区，就是干净的</li><li>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支<ul><li><code>git checkout master</code></li><li><code>git checkout -b issue-101</code></li></ul></li><li>修复完bug后，切换到<code>master</code>分支，完成非快速合并，最后删除<code>issue-101</code>分支</li><li>此时可以回到原dev分支继续干活了<ul><li>使用<code>git stash list</code>查看工作现场</li><li>有两种方式恢复工作现场<ol><li>用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除<ul><li>如果将工作区内容多次保存到stash，则可以加 stash@{0} 这样的编号来指定恢复哪个<ul><li><code>git stash apply stash@{0}</code></li></ul></li></ul></li><li>用<code>git stash pop</code>，恢复最后一次保存的工作区内容，同时这个命令会将对应的stash内容清除掉</li></ol></li></ul></li><li>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</li></ul><h3 id="Feature分支——强行删除分支"><a href="#Feature分支——强行删除分支" class="headerlink" title="Feature分支——强行删除分支"></a>Feature分支——强行删除分支</h3><ul><li>每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支</li><li>如果需要在master分支上删除一个已经提交但没有合并的其它分支，可以用参数 -D 强制删除<ul><li><code>git branch -D feature-vulcan</code></li></ul></li><li>由于分支未合并，如果删除，将丢失掉分支上的所有修改</li></ul><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><ul><li><p>查看远程库的信息</p><ul><li><code>git remote</code> 或<code>git remote -v</code></li></ul></li><li><p>推动分支：推送时，要指定本地分支</p><ul><li><code>git push origin master</code></li></ul></li><li><p>抓取分支：</p><ul><li>多人协作时，大家都会往master和dev分支上推送各自的修改</li><li>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支<ul><li><code>git clone git@server-name:path/repo-name.git</code></li></ul></li><li>小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，这个命令创建本地<code>dev</code>分支<ul><li><code>git checkout -b dev origin/dev</code></li></ul></li><li>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程<ul><li><code>git add env.txt</code>   <code>git push origin dev</code></li></ul></li><li>此时假设你也对同样的文件作了修改，并试图推送，就会产生冲突，可以使用以下方式解决<ul><li>先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送<ul><li>git pull失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接后，再次git pull即可成功</li><li><code>git branch --set-upstream-to=origin/dev dev</code></li></ul></li></ul></li></ul></li><li><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功！</li></ol><ul><li>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code></li></ul></li></ul><h2 id="私有Git服务器搭建"><a href="#私有Git服务器搭建" class="headerlink" title="私有Git服务器搭建"></a>私有Git服务器搭建</h2><h3 id="Git服务器搭建"><a href="#Git服务器搭建" class="headerlink" title="Git服务器搭建"></a>Git服务器搭建</h3><ol><li><p>准备：linux服务器</p></li><li><p>安装Git服务的环境准备</p><p><code>yum -y install curl curl-devel zlib-devel openssl-devel perl cpio expat-devel gettext-devel gcc cc</code></p></li><li><p>下载git.tar.gz（git源码）</p><ol><li><p>解压缩</p></li><li><p>d git-2.5.0</p></li><li><p>autoconf</p></li><li><p>./configure</p></li><li><p>make</p></li><li><p>make install</p></li></ol></li><li><p>添加linux用户</p><p><code>adduser -r -c 'git version control' -d /home/git -m git</code></p><ul><li>此命令执行后会创建/home/git目录作为git用户的主目录</li></ul></li><li><p>设置密码</p><p><code>passwd git</code></p></li><li><p>切换到git用户</p><p><code>su git</code></p></li><li><p>创建git仓库</p><p><code>git --bare init /home/git/first</code></p></li></ol><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><ul><li><p>私有git服务器搭建完成后就可以向连接github一样连接使用了，但是我们的git服务器并没有配置密钥登录，所以每次连接时需要输入密码。</p></li><li><p>使用命令连接：</p><p><code>git remote add origin ssh://git@192.168.25.156/home/git/first</code></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的基本使用（2）</title>
      <link href="/2019/12/14/spring-ji-ben-shi-yong-2/"/>
      <url>/2019/12/14/spring-ji-ben-shi-yong-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring对JDBC和数据层的支持"><a href="#Spring对JDBC和数据层的支持" class="headerlink" title="Spring对JDBC和数据层的支持"></a>Spring对JDBC和数据层的支持</h2><ol><li><p>JdbcTemplate 概述<br> 它是 spring 框架中提供的一个对象，是对原始 Jdbc API 对象的简单封装。 spring 框架为我们提供了很多的操作模板类。  </p><ul><li>操作关系型数据的：<ul><li>JdbcTemplate </li><li>HibernateTemplate</li></ul></li><li>操作 nosql 数据库的：<ul><li>RedisTemplate</li></ul></li><li>操作消息队列的：<ul><li>JmsTemplate</li></ul></li></ul></li><li><p>JdbcTemplate 基本用法</p><ol><li><p>导入依赖<br> spring-jdbc-5.0.2.RELEASE.jar<br> spring-jdbc-5.0.2.RELEASE.jar</p></li><li><p>准备数据源(C3P0,DBCP,Spring内置数据源)</p></li><li><p>创建JdbcTemplate对象并为其设置数据源</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//准备数据源：spring的内置数据源</span> DriverManagerDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/eesy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1.创建JdbcTemplate对象</span> JdbcTemplate jt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给jt设置数据源</span> jt<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.执行操作</span> jt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into account(name,money)values('ccc',1000)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol></li><li><p>Spring对JdbcTemplate</p><ol><li>创建Sping的配置文件并导入约束</li><li>配置JdbcTemplate</li><li>配置数据源</li></ol></li></ol><ol start="4"><li><p>JdbcTemplate 的增删改查操作</p><ol><li>前期准备：创建数据库，在spring配置文件中配置 JdbcTemplate</li><li>基本使用<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.获取 Spring 容器</span>ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.根据 id 获取 bean 对象</span>JdbcTemplate jt <span class="token operator">=</span> <span class="token punctuation">(</span>JdbcTemplate<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.执行操作</span>jt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into account(name,money)values('eee',500)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>保存操作<br><code>jt.update("insert into account(name,money)values(?,?)","fff",5000);</code></li><li>更新操作<br><code>jt.update("update account set money = money-? where id = ?",300,6);</code></li><li>删除操作<br><code>jt.update("delete from account where id = ?",6)</code></li><li>查询所有操作<br><code>List&lt;Account&gt; accounts = jt.query("select * from account where money &gt; ?",new AccountRowMapper(),1000f)</code></li></ol><ul><li>根据具体情况选择具体的query方法</li><li>AccountRowMapper是RowMapper接口的实现类，实现接口的方法<ul><li>把结果集中的数据封装到account，然后由spring把每个Account加到集合中</li></ul></li><li>Spring中提供了一个 RowMapper接口的实现类BeanPropertyRowMapper<br><code>List&lt;Account&gt; accounts = jt.query("select * from account where money &gt; ?",new BeanPropertyRowMapper&lt;Account&gt;(Account.class),1000f);</code></li></ul><ol start="7"><li>查询一个<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> jt<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where id = ?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accounts<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"没有内容"</span><span class="token operator">:</span>accounts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>查询返回一行一列<br><code>Long count = jt.queryForObject("select count(*) from account where money &gt; ?",Long.class,1000f);</code></li></ol></li><li><p>在dao中使用JdbcTemplate</p><ol><li>方式一<ol><li>准备实体类Account</li><li>准备持久层接口IAccountDao以及其实现类AccountDaoImpl<ul><li>实现类中使用jdbcTemplate实现数据库的增删改查</li></ul></li><li>在Spring的配置文件中，配置dao并注入jdbcTemplate<blockquote><p>存在问题：当dao有很多时，每个dao都有一些重复性的代码</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol></li><li>方式二<ul><li>JdbcDaoSupport是spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，但是要想创建该对象，需要为其提供一个数据源DataSource</li></ul><ol><li>在Dao的实现类中，继承JdbcDaoSupport，这样就可以通过getJdbcTemplate()获得一个JdbcTemplate对象</li><li>此时需要修改spring配置文件，在配置dao时不注入jdbcTemplate而是注入dataSource</li></ol></li><li>两种方式的不同之处<ol><li>方式二解决了方式一重复代码的问题，但是让Dao继承JdbcDaoSupport的方式，只能用于基于XML的方式，无法基于注解开发</li><li>方式一在Dao类中定义JdbcTemplate的方式，适用于所有配置方式（xml和注解都可以）</li></ol></li></ol></li></ol><h2 id="Spring中对事务的控制"><a href="#Spring中对事务的控制" class="headerlink" title="Spring中对事务的控制"></a>Spring中对事务的控制</h2><ol><li><p>关于Spring中的事务控制</p><ol><li>JavaEE 体系进行分层开发，事务处理位于业务层， Spring 提供了分层设计业务层的事务处理解决方案。</li><li>spring 框架为我们提供了一组事务控制的接口。这组接口是在spring-tx-5.0.2.RELEASE.jar 中。</li><li>spring 的事务控制都是基于AOP的，它既可以使用编程的方式实现，也可以使用配置的方式实现。重点是使用配置的方式实现。</li></ol></li><li><p>Spring事务控制的API</p><ol><li><p>PlatformTransactionManager</p><ul><li><p>此接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法  </p><ul><li><p>获取事务的状态信息</p><p>TransactionStatus getTransaction(TransactionDefinition definition)</p></li><li><p>提交事务</p><p>void commit(TransactionStatus status)</p></li><li><p>回滚事务</p><p>void rollback(TransactionStatus status)</p></li></ul></li><li><p>我们在开发中使用它的实现类</p><ul><li>org.springframework.jdbc.datasource.DataSourceTransactionManager 使用 Spring JDBC 或 iBatis 进行持久化数据时使用</li><li>org.springframework.orm.hibernate5.HibernateTransactionManager 使用<br>Hibernate 版本进行持久化数据时使用</li></ul></li></ul></li><li><p>TransactionDefinition</p><ul><li><p>事务的定义信息对象，常用方法</p><ul><li><p>获取事务对象名称</p><p>String getName()</p></li><li><p>获取事务隔离级别</p><p>int getlsolationlevel()</p></li><li><p>获取事务的传播行为</p><p>int getPropagationBehavior()</p></li><li><p>获取事务超时时间</p><p>int getTimeout()</p></li><li><p>获取事务是否只读</p><p>boolean isReadOnly()</p></li></ul></li><li><p>事务隔离级别：</p><ul><li>反映事务提交并发访问时的处理态度</li></ul></li><li><p>事务传播行为</p><ul><li>REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</li><li>SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li></ul></li><li><p>事务超时时间</p></li><li><p>默认值是-1，没有超时限制。如果有，以秒为单位进行设置</p></li><li><p>事务是否只读</p><ul><li>建议查询时设置为只读</li></ul></li></ul></li><li><p>TransactionStatus  </p><ul><li><p>此接口提供的是事务具体的运行状态，常用方法</p><ul><li><p>刷新事务</p><p>void flush()</p></li><li><p>获取是否存在存储点</p><p>boolean hasSavepoint()</p></li><li><p>获取事务是否完成</p><p>boolean isCompleted()</p></li><li><p>获取事务是否为新的事务</p><p>boolean isNewTransaction()</p></li><li><p>获取事务是否回滚</p><p>boolean isRollbackOnly()</p></li></ul></li><li><p>设置事务回滚</p><p>  void setRollbackOnly()</p></li></ul></li></ol></li><li><p>基于xml的声明式事务控制</p><ol><li><p>配置事务管理器</p></li><li><p>配置事务的通知</p><ul><li>此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的</li><li>使用tx:advice标签配置事务通知<ul><li>属性：<ul><li>id：给事务通知起一个唯一标识</li><li>transaction-manager：给事务通知提供一个事务管理器引用</li></ul></li></ul></li></ul></li><li><p>配置AOP中的通用切入点表达式</p></li><li><p>建立事务通知和切入点表达式的对应关系</p></li><li><p>配置事务的属性</p><ul><li><p>是在事务的通知tx:advice标签的内部</p><ul><li>isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</li><li>propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</li><li>read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</li><li>timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</li><li>rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</li><li>no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</li></ul></li><li><p>代码示例</p></li></ul></li></ol></li></ol><pre><code>    ```xml    &lt;?xml version="1.0" encoding="UTF-8"?&gt;    &lt;beans xmlns="http://www.springframework.org/schema/beans"           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns:aop="http://www.springframework.org/schema/aop"           xmlns:tx="http://www.springframework.org/schema/tx"           xsi:schemaLocation="            http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/tx            http://www.springframework.org/schema/tx/spring-tx.xsd            http://www.springframework.org/schema/aop            http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;!-- 配置业务层--&gt;    &lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"&gt;        &lt;property name="accountDao" ref="accountDao"&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 配置账户的持久层 继承JdbcDaoSupport了 需要注入dataSource --&gt;    &lt;bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl"&gt;        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 配置数据源--&gt;    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;        &lt;property name="url" value="jdbc:mysql://localhost:3306/eesy"&gt;&lt;/property&gt;        &lt;property name="username" value="root"&gt;&lt;/property&gt;        &lt;property name="password" value="1234"&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 配置事务管理器 --&gt;    &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;!-- 配置事务的通知--&gt;    &lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;        &lt;!-- 配置事务的属性 --&gt;        &lt;tx:attributes&gt;            &lt;tx:method name="*" propagation="REQUIRED" read-only="false"/&gt;            &lt;tx:method name="find*" propagation="SUPPORTS" read-only="true"&gt;&lt;/tx:method&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!-- 配置aop--&gt;    &lt;aop:config&gt;        &lt;!-- 配置切入点表达式--&gt;        &lt;aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"&gt;&lt;/aop:pointcut&gt;        &lt;!--建立切入点表达式和事务通知的对应关系 --&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"&gt;&lt;/aop:advisor&gt;    &lt;/aop:config&gt;    &lt;/beans&gt;    ```</code></pre><ol start="4"><li>基于注解的声明式事务控制<ol><li>配置事务管理器</li><li>开启spring对注解事务的支持</li><li>在需要事务支持的地方（业务层ServiceImpl实现类）使用@Transactional注解<ul><li>事务支持一般位于于业务层ServiceImpl实现类</li><li>事务的属性在@Transactional()中配置</li></ul></li></ol><ul><li>注意此时需要自己定义jdbctemplate，不能再继承JdbcDaoSupport</li><li>代码示例<ul><li>spring配置文件</li></ul></li></ul></li></ol><pre><code>      ```xml      &lt;?xml version="1.0" encoding="UTF-8"?&gt;      &lt;beans xmlns="http://www.springframework.org/schema/beans"             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"             xmlns:aop="http://www.springframework.org/schema/aop"             xmlns:tx="http://www.springframework.org/schema/tx"             xmlns:context="http://www.springframework.org/schema/context"             xsi:schemaLocation="              http://www.springframework.org/schema/beans              http://www.springframework.org/schema/beans/spring-beans.xsd              http://www.springframework.org/schema/tx              http://www.springframework.org/schema/tx/spring-tx.xsd              http://www.springframework.org/schema/aop              http://www.springframework.org/schema/aop/spring-aop.xsd              http://www.springframework.org/schema/context              http://www.springframework.org/schema/context/spring-context.xsd"&gt;              &lt;!-- 配置spring创建容器时要扫描的包--&gt;      &lt;context:component-scan base-package="com.itheima"&gt;&lt;/context:component-scan&gt;      &lt;!-- 配置JdbcTemplate--&gt;      &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;          &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;      &lt;/bean&gt;      &lt;!-- 配置数据源--&gt;      &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;          &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;          &lt;property name="url" value="jdbc:mysql://localhost:3306/eesy"&gt;&lt;/property&gt;          &lt;property name="username" value="root"&gt;&lt;/property&gt;          &lt;property name="password" value="1234"&gt;&lt;/property&gt;      &lt;/bean&gt;      &lt;!-- 配置事务管理器 --&gt;      &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;          &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;      &lt;/bean&gt;      &lt;!-- 开启spring对注解事务的支持--&gt;      &lt;tx:annotation-driven transaction-manager="transactionManager"&gt;&lt;/tx:annotation-driven&gt;      &lt;/beans&gt;      ```</code></pre><ol start="5"><li><p>基于注解的声明式事务控制</p><ul><li><p>总结来说，就是将上述xml文件中的配置逐步转换为相应的注解配置</p></li><li><p>代码示例</p><ul><li><p>主配置类SpringConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>TransactionConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>其他配置类JdbcConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**和连接数据库相关的配置类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String driver<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String url<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建JdbcTemplate * @param dataSource * @return   */</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> JdbcTemplate <span class="token function">createJdbcTemplate</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建数据源对象 * @return   */</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       DriverManagerDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>       ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>       ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>       ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ds<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>其他配置类TransactionConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 和事务相关的配置类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用于创建事务管理器对象     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">createTransactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>spring测试类中更改注解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用Junit单元测试：测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes<span class="token operator">=</span> SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span>  IAccountService as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>Spring编程式事务控制（实际中很少使用采用）</p><ul><li>过多的重复代码</li></ul></li></ol><h2 id="Sring5的新特性"><a href="#Sring5的新特性" class="headerlink" title="Sring5的新特性"></a>Sring5的新特性</h2><ol><li><p>与JDK相关的升级</p><ul><li>spring5.0 在 2017 年 9 月发布了它的 GA（通用）版本。该版本是基于 jdk8 编写的， 所以 jdk8 以下版本将无法使用。 同时，可以兼容 jdk9 版本。tomcat 版本要求 8.5 及以上。  </li></ul></li><li><p>核心容器的的更新</p><ul><li>Spring Framework 5.0 现在支持候选组件索引作为类路径扫描的替代方案。该功能已经在类路径扫描器中添加，以简化添加候选组件标识的步骤</li><li>从索引读取实体而不是扫描类路径对于小于 200 个类的小型项目是没有明显差异。但对大型项目影响较大。加载组件索引开销更低。因此，随着类数的增加，索引读取的启动时间将保持不变。</li></ul></li><li><p>JetBrains Kotlin 语言支持  </p><ul><li>Kolin概述：是一种支持函数式编程编程风格的面向对象语言。 Kotlin 运行在 JVM 之上，但运行环境并不限于 JVM。  </li></ul></li><li><p>响应式编程风格</p><ul><li>新的响应式堆栈 WEB 框架。这个堆栈完全的响应式且非阻塞，适合于事件循环风格的处理，可以进行少量线程的扩展。  </li></ul></li><li><p>Junit5支持</p></li><li><p>依赖类库的更新</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> Jdbc </tag>
            
            <tag> 事务控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基本使用（1）</title>
      <link href="/2019/12/12/spring-ji-ben-shi-yong-1/"/>
      <url>/2019/12/12/spring-ji-ben-shi-yong-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-Spring是什么"><a href="#1-Spring是什么" class="headerlink" title="1. Spring是什么"></a>1. Spring是什么</h2><p>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。</p><h2 id="2-Spring的优势"><a href="#2-Spring的优势" class="headerlink" title="2. Spring的优势"></a>2. Spring的优势</h2><ol><li><p>方便解耦，简化开发</p></li><li><p>AOP编程的支持</p></li><li><p>声明式事务的支持</p></li><li><p>方便程序的测试</p></li><li><p>方便集成各种优秀的框架</p></li><li><p>降低 JavaEE API的使用难度</p><ul><li><p>什么是程序的耦合？</p><ul><li><p>程序间的依赖关系</p><ul><li>类之间的依赖</li><li>方法间的依赖</li></ul></li><li><p>解耦</p><ul><li>降低程序间的依赖关系</li></ul></li><li><p>实际开发中</p><ul><li>编译期不依赖，运行时才依赖</li></ul></li><li><p>解耦的思路：</p><ol><li>使用反射来创建对象，而避免使用new关键字</li><li>通过读取配置文件来获取要创建的对象全限定类名</li></ol></li><li><p>Bean: 在计算机英语中，有可重用组件的含义</p></li><li><p>JavaBean: 用java语言编写的可重用组件   javabean&gt;实体类</p></li><li><p>一个创建Bean对象的工厂： 创建service和dao对象</p><ol><li>需要一个配置文件配置service和dao  （xml或者properties）<ul><li>配置内容：唯一标识=全限定类名（key=value）</li></ul></li><li>通过读取配置文件中的配置内容，反射创建对象</li></ol></li><li><p>IOC（Inverse Of Control：控制反转）</p><ul><li>把创建对象的权利交给框架，是框架的重要特征</li><li>作用：削减程序间的耦合</li></ul></li></ul></li></ul></li></ol><h2 id="3-Spring容器简介"><a href="#3-Spring容器简介" class="headerlink" title="3. Spring容器简介"></a>3. Spring容器简介</h2><ol><li>在Spring中，任何的Java类和JavaBean都被当作Bean处理，这些Bean通过容器管理和应用</li><li>Spring容器实现了IOC和AOP机制，这些机制可以简化Bean对象创建和Bean对象之间的解耦</li><li>Spring容器有BeanFactory和ApplicationContext两种类型</li></ol><ul><li>JavaBean是一种简单规范的Java对象</li><li>何时使用Spring？ 当需要管理JavaBean对象的时候就可以使用Spring，Spring是最简洁的对象管理方案之一</li></ul><h2 id="4-Spring容器的实列化"><a href="#4-Spring容器的实列化" class="headerlink" title="4. Spring容器的实列化"></a>4. Spring容器的实列化</h2><ol><li><p>在maven工程的配置文件中导入spring依赖</p></li><li><p>在资源根目录下创建xml文件</p></li><li><p>让spring管理资源，在xml配置文件中配置service和dao</p></li><li><p>测试使用：</p><ol><li><p>获取核心容器容器<br><code>ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</code></p></li><li><p>根据 bean 的 id 获取对象</p><pre><code> IAccountService aService = (IAccountService) ac.getBean("accountService"); IAccountService aService = ac.getBean("accountService",IAccountDao.class); System.out.println(aService); IAccountDao aDao = (IAccountDao) ac.getBean("accountDao"); System.out.println(aDao);</code></pre></li><li><p>执行所需执行的方法</p><ul><li>ApplicationContext的三个常用实现类<ul><li>ClassPathXmlApplicationContext：<ul><li>从类的根路径下加载配置文件</li></ul></li><li>FileSystemXmlApplicationContext：<ul><li>从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置</li></ul></li><li>AnnotationConfigApplicationContext:<ul><li>使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解</li></ul></li></ul></li><li>核心容器的两个接口引发出的问题<ul><li>BeanFactory：单列对象适用 （常用）<ul><li>创建对象采取的策略是延迟加载的方式。什么使用什么时候创建对象。（</li></ul></li><li>ApplicationContext：多例对象适用<ul><li>创建对象采取的策略是立即加载的方式。只要一读取配置文件，默认情况下马上就会创建配置文件中配置的对象。</li></ul></li></ul></li></ul></li></ol></li></ol><h2 id="5-Spring对Bean的管理细节"><a href="#5-Spring对Bean的管理细节" class="headerlink" title="5. Spring对Bean的管理细节"></a>5. Spring对Bean的管理细节</h2><ol><li><p>bean 标签</p><ul><li>作用：用于配置对象让 spring 来创建的。默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。</li><li>属性：<ul><li>id： 给对象在容器中提供一个唯一标识。用于获取对象。</li><li>class： 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。</li><li>scope： 指定对象的作用范围。</li><li>init-method： 指定类中的初始化方法名称。</li><li>destroy-method： 指定类中销毁方法名称。</li></ul></li></ul></li><li><p>创建Bean的三种方式（sping配置文件中）</p><ol><li><p>使用默认构造函数创建</p><ul><li>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时 </li><li>它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败<br><code>&lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"/&gt;</code></li></ul></li><li><p>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</p><ul><li><p>先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法</p></li><li><p>factory-bean 属性：用于指定实例工厂 bean 的 id。</p></li><li><p>factory-method 属性：用于指定实例工厂中创建对象的方法。</p><pre><code>  InstanceFactory.java  /**  * 模拟一个实例工厂，创建业务层实现类  * 此工厂创建对象，必须现有工厂实例对象，再调用方法  */  public class InstanceFactory {  public IAccountService createAccountService(){  return new AccountServiceImpl();  }  }</code></pre></li></ul></li></ol></li></ol><pre><code>            spring xml配置文件            &lt;bean id="instancFactory" class="com.it.factory.InstanceFactory"&gt;&lt;/bean&gt;            &lt;bean id="accountService"            factory-bean="instancFactory"            factory-method="createAccountService"&gt;&lt;/bean&gt;3. 使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）    - 先把工厂的创建交给 spring 来管理。然后再使用工厂的 bean 来调用里面的方法    - factory-bean 属性：用于指定实例工厂 bean 的 id。    - factory-method 属性：用于指定实例工厂中创建对象的方法。            StaticFactory.java            /**            * 模拟一个实例工厂，创建业务层实现类            * 此工厂创建对象，必须现有工厂实例对象，再调用方法            */            public class StaticFactory {            public static IAccountService createAccountService(){            return new AccountServiceImpl();            }            }            spring xml配置文件            &lt;bean id="accountService" class="com.it.factory.StaticFactory"             factory-method="createAccountService"&gt;&lt;/bean&gt;</code></pre><ol start="3"><li>bean的作用范围：<ol><li>bean标签的scope属性：<ul><li>singleton：单例值（默认值） 一个应用只有一个对象的实例。它的作用范围就是整个引用</li><li>prototype：多例的 每次访问对象时，都会重新创建对象实例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li></ul></li></ol></li><li>bean对象的生命周期：<ol><li>单例对象： scope=”singleton”<ul><li>一个应用只有一个对象的实例。它的作用范围就是整个引用。</li><li>生命周期：<ul><li>对象出生：当应用加载，创建容器时，对象就被创建了。</li><li>对象活着：只要容器在，对象一直活着。</li><li>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</li></ul></li></ul></li><li>多例对象： scope=”prototype”<ul><li>每次访问对象时，都会重新创建对象实例。</li><li>生命周期：<ul><li>对象出生：当使用对象时，创建新的对象实例。</li><li>对象活着：只要对象在使用中，就一直活着。</li><li>对象死亡：当对象长时间不用时，且没有被别的对象引用时，被java的垃圾回收器回收了。</li></ul></li></ul></li></ol></li></ol><h2 id="6-Spring中的IOC（依赖注入）"><a href="#6-Spring中的IOC（依赖注入）" class="headerlink" title="6. Spring中的IOC（依赖注入）"></a>6. Spring中的IOC（依赖注入）</h2><ol><li><p>IOC概念</p><ul><li>IOC全称是Inversion of Control,被翻译为控制反转；</li><li>IOC是指程序中对象的获取方式发生反转，由最初的new方式创建，转变为由第三方框架创建和注入，<br>第三方框架一般是通过配置方式指定注入哪一个具体实现，从而降低了对象之间的耦合度</li><li>IOC按实现方法不同，可以分为依赖注入DI和依赖查找两种</li><li>Spring容器是采用DI方式实现了IOC控制，IOC是Spring框架的基础和核心。</li><li>DI全称是Dependency Injection，被翻译为依赖注入；</li><li>DI的基本原理就是将一起工作具有关系的对象，通过构造方法参数或方法参数传入建立关联，因此容器的工作就是创建bean时注入那些依赖关系</li><li>IOC是一种思想，而DI是实现IOC的主要技术和途径</li></ul></li><li><p>依赖注入基本概念</p><ul><li>依赖注入： Dependency Injection。 它是 spring 框架核心 ioc 的具体实现。</li><li>我们的程序在编写时，通过控制反转，把对象的创建交给了spring，但是代码中不可能出现没有依赖的情况。ioc解耦只是降低他们的依赖关系，但不会消除。例如：我们的业务层仍会调用持久层的方法。那这种业务层和持久层的依赖关系，在使用 spring 之后，就让spring来维护了。简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</li></ul></li><li><p>依赖关系的管理：交给spring来维护。当当前类需要用到其他类的对象时，由spring为我们提供，我们只需要在配置文件中说明</p></li><li><p>依赖关系的维护就称之为依赖注入</p></li><li><p>依赖注入能注入的数据：（三类）</p><ol><li>基本类型和String</li><li>其他bean类型（配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ol></li><li><p>依赖注入的方式（三种）</p><ol><li><p>使用构造函数提供</p><ul><li><p>使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让spring框架来为我们注入</p><pre><code>  &lt;!-- 使用构造函数的方式，给 service 中的属性传值  要求：      类中需要提供一个对应参数列表的构造函数。  涉及的标签：      constructor-arg  属性：      index:指定参数在构造函数参数列表的索引位置      type:指定参数在构造函数中的数据类型      name:指定参数在构造函数中的名称 用这个找给谁赋值      =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============      value:它能赋的值是基本数据类型和String类型      ref:它能赋的值是其他 bean 类型，也就是说，必须得是在spring配置文件中配置过的 bean  优势：获取bean对象时，注入数据是必须的操作，否则对象无法创建成功  弊端：改变了bean对象的实例化方式，使在创建对象时，如果用不到这些数据，也必须提供  --&gt;  &lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"&gt;      &lt;constructor-arg name="name" value="张三"&gt;&lt;/constructor-arg&gt;      &lt;constructor-arg name="age" value="18"&gt;&lt;/constructor-arg&gt;      &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;  &lt;/bean&gt;  &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</code></pre></li></ul></li><li><p>使用set方法提供（实际开发中，此种方式用的较多）</p><ul><li><p>在类中提供需要注入成员的 set 方法。</p><pre><code>  &lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式  涉及的标签：      property  属性：      name：找的是类中 set 方法后面的部分      ref：给属性赋值是其他 bean 类型的      value：给属性赋值是基本数据类型和 string 类型的  优势：创建对象时，没有明确的限制，可以直接使用默认构造函数  弊端：如果有某个成员必须有值，则获取对象是有可能set方法没有执行  --&gt;  &lt;bean id="accountService" class="com.it.service.impl.AccountServiceImpl"&gt;      &lt;property name="name" value="test"&gt;&lt;/property&gt;      &lt;property name="age" value="21"&gt;&lt;/property&gt;      &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;</code></pre></li><li><p>集合类型数据的注入（只能使用构造函数和set方式两种方法）</p><ul><li><p>set方法</p><pre><code>&lt;!-- 注入集合数据List 结构的：array,list,setMap 结构的map,entry,props,prop--&gt;&lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"&gt;&lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;&lt;!-- 给数组注入数据 --&gt;&lt;property name="myStrs"&gt;&lt;set&gt;&lt;value&gt;AAA&lt;/value&gt;&lt;value&gt;BBB&lt;/value&gt;&lt;value&gt;CCC&lt;/value&gt;&lt;/set&gt;&lt;/property&gt;&lt;!-- 注入 list 集合数据 --&gt;&lt;property name="myList"&gt;&lt;array&gt;&lt;value&gt;AAA&lt;/value&gt;&lt;value&gt;BBB&lt;/value&gt;&lt;value&gt;CCC&lt;/value&gt;&lt;/array&gt;&lt;/property&gt;&lt;!-- 注入 set 集合数据 --&gt;&lt;property name="mySet"&gt;&lt;list&gt;&lt;value&gt;AAA&lt;/value&gt;&lt;value&gt;BBB&lt;/value&gt;&lt;value&gt;CCC&lt;/value&gt;&lt;/list&gt;&lt;/property&gt;&lt;!-- 注入 Map 数据 --&gt;&lt;property name="myMap"&gt;&lt;props&gt;&lt;prop key="testA"&gt;aaa&lt;/prop&gt;&lt;prop key="testB"&gt;bbb&lt;/prop&gt;&lt;/props&gt;&lt;/property&gt;&lt;!-- 注入 properties 数据 --&gt;&lt;property name="myProps"&gt;&lt;map&gt;&lt;entry key="testA" value="aaa"&gt;&lt;/entry&gt;&lt;entry key="testB"&gt;&lt;value&gt;bbb&lt;/value&gt;&lt;/entry&gt;&lt;/map&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre></li></ul></li></ul></li></ol></li></ol><pre><code>3. 使用注解提供</code></pre><h2 id="7-Spring中基于注解的IOC配置"><a href="#7-Spring中基于注解的IOC配置" class="headerlink" title="7. Spring中基于注解的IOC配置"></a>7. Spring中基于注解的IOC配置</h2><ol><li><p>环境：</p><ul><li><p>创建spring的xml配置文件并开启对注解的支持</p><ul><li><p>注意：基于注解整合时，导入约束时需要多导入一个 context 名称空间下的约束 </p><pre><code>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;beans xmlns="http://www.springframework.org/schema/beans"  xmlns:context="http://www.springframework.org/schema/context"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd"&gt;  &lt;!-- 告知 spring 创建容器时要扫描的包  --&gt;  &lt;context:component-scan base-package="com.it"&gt;&lt;/context:component-scan&gt;  &lt;!-- 配置 dbAssit --&gt;  &lt;bean id="dbAssit" class="com.it.dbassit.DBAssit"&gt;  &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;!-- 配置数据源 --&gt;  &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;  &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;  &lt;property name="jdbcUrl" value="jdbc:mysql:///spring_day02"&gt;&lt;/property&gt;  &lt;property name="user" value="root"&gt;&lt;/property&gt;  &lt;property name="password" value="1234"&gt;&lt;/property&gt;  &lt;/bean&gt;  &lt;/beans&gt;</code></pre></li></ul></li></ul></li><li><p>常用的IOC注解按照作用分类</p><ul><li>用于创建对象的<ul><li>类似于xml配置文件中的<bean>标签</bean></li><li>@Component：<ul><li>作用：用于把当前类对象存入spring容器中</li><li>属性：value：用于指定bean的id，当我们不写时，它的默认值是当前类名，且首字母小写</li></ul></li><li>@Controller：一般用在表现层</li><li>@Service：一般用在业务层</li><li>@Repository：一般用在持久层</li><li>以上三个注解的作用和属性和@Component是一模一样的。</li><li>它们三个是spring框架为我们提供明确的三层使用的注解，使三层架构对象更为清晰</li></ul></li><li>用于注入数据的<ul><li>类似于xml配置文件中<bean>标签中的<property></property></bean></li><li>@Autowired:<ul><li>作用：自动按照类型注入。<ul><li>只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可注入成功。</li><li>若IOC容器中没有匹配到，则报错</li><li>若IOC容器中有多个类型匹配时，可能会报错</li></ul></li><li>位置：变量，方法上</li></ul></li><li>@Qualifier：<ul><li>作用：在自动按照类型注入的基础之上，再按照 Bean的id 注入。它在给类成员注入时不能独立使用，必须和@Autowire 一起使用；但是给方法参数注入时，可以独立使用。</li></ul></li><li>Resource：<ul><li>作用：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型</li><li>属性：    name：指定 bean 的 id。</li></ul></li><li>注意： 以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现，另外，集合类型的注入只能通过xml来实现</li><li>@Value<ul><li>作用：注入基本数据类型和string类型数据</li><li>属性：value：用于指定数据的值。它可以使用spring中的SpEL（也就是spring中的el表达式）</li></ul></li></ul></li><li>用于改变作用范围的<ul><li>类似于xml配置文件中<bean>标签中的<scope></scope></bean></li><li>@Scope<ul><li>作用：指定 bean 的作用范围。</li><li>属性：value：指定范围的值。取值： singleton prototype request session globalsession</li></ul></li></ul></li><li>和生命周期相关的<ul><li>类似于xml配置文件中<bean>标签中的init-method和destroy-methode的作用是一样的</bean></li><li>@PostConstruct<ul><li>作用：用于指定初始化方法。</li></ul></li><li>@PreDestroy<ul><li>作用：用于指定销毁方法。</li></ul></li></ul></li></ul></li><li><p>spring的新注解（使spring脱离xml配置文件）</p><ul><li>@Configuration<ul><li>作用：用于指定当前类是一个 spring 配置类， 当创建容器时会从该类上加载注解。 获取容器时需要使用AnnotationApplicationContext(有@Configuration 注解的类.class)。</li><li>属性：value:用于指定配置类的字节码</li><li>当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</li></ul></li><li>@ComponentScan<ul><li>作用：用于指定 spring 在初始化容器时要扫描的包。 作用和在 spring 的 xml 配置文件中的：&lt;context:component-scan base-package=”com.it”/&gt;是一样的。</li><li>属性：basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样。</li></ul></li><li>@Bean<ul><li>作用：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。</li><li>属性：name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）。</li><li>当使用注解配置方法时，如果方法有参数，spring框架回去容器中查找有没有可用的bean对象，查找的方式和Autowired注解的作用是一样的</li></ul></li><li>@Import<ul><li>作用：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration 注解。写上也没问题</li><li>属性：value[]：用于指定其他配置类的字节码。</li><li>有@Import注解的类是父配置类，导入的类都是子配置类</li></ul></li><li>@PropertySource<ul><li>作用：用于加载.properties 文件中的配置。例如配置数据源时，可以把连接数据库的信息写到properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。</li><li>属性：value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:</li></ul></li></ul></li><li><p>注解和xml的选择</p><pre><code>     ![注解和xml的选择](https://i.imgur.com/dFAZVUb.png)  </code></pre></li></ol><h2 id="8-Spring整合junit配置"><a href="#8-Spring整合junit配置" class="headerlink" title="8. Spring整合junit配置"></a>8. Spring整合junit配置</h2><ol><li><p>导入spring整合junit的jar（坐标）</p></li><li><p>使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的</p><ul><li><p>@Runwith</p><p>  <code>@RunWith(SpringJUnit4ClassRunner.class)</code></p></li></ul></li><li><p>告知spring的运行器，spring的IOC创建是基于XML还是注解的，并说明位置</p><ul><li><p>@ContextConfiguration()</p><ul><li><p>locations 属性： 用于指定配置文件的位置。如果是类路径下，需要用 classpath:表明</p></li><li><p>classes 属性： 用于指定注解的类。当不使用 xml 配置时，需要用此属性指定注解类的位置</p><pre><code>  @RunWith(SpringJUnit4ClassRunner.class)  @ContextConfiguration(locations= {"classpath:bean.xml"})</code></pre></li></ul></li></ul></li></ol><h2 id="9-Spring中AOP的一些细节"><a href="#9-Spring中AOP的一些细节" class="headerlink" title="9. Spring中AOP的一些细节"></a>9. Spring中AOP的一些细节</h2><ol><li>AOP相关术语：<ul><li>Joinpoint(连接点):<br>  所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。</li><li>Pointcut(切入点):<br>  所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li><li>Advice(通知/增强):<br>  所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。<br>  通知的类型： 前置通知,后置通知,异常通知,最终通知,环绕通知。</li><li>Introduction(引介):<br>  引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。</li><li>Target(目标对象):<br>  代理的目标对象。</li><li>Weaving(织入):<br>  是指把增强应用到目标对象来创建新的代理对象的过程。<br>  spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</li><li>Proxy（代理） :<br>  一个类被 AOP 织入增强后，就产生一个结果代理类。</li><li>Aspect(切面):<br>  是切入点和通知（引介）的结合。</li></ul></li><li>相关工作<ol><li>开发阶段<ul><li>编写核心业务代码（开发主线）</li><li>公用代码抽取，制作成通知</li><li>配置文件中，声明切入点与通知间的关系，即切面</li></ul></li><li>运行阶段<ul><li>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</li></ul></li></ol></li></ol><h2 id="10-Spring中基于XML的AOP配置"><a href="#10-Spring中基于XML的AOP配置" class="headerlink" title="10. Spring中基于XML的AOP配置"></a>10. Spring中基于XML的AOP配置</h2><ol><li><p>导入必备的jar包依赖</p></li><li><p>创建spring的约束并导入配置文件  </p><pre><code> &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt; &lt;/beans&gt;</code></pre></li><li><p>配置spring的ioc（Service,dao,dbutils.QueryRunner,数据源)</p></li><li><p>抽取公共代码制作成通知类（事务管理器）</p></li><li><p>通知类用 bean 标签配置起来</p></li><li><p>使用 aop:config 声明 aop 配置</p></li><li><p>使用 aop:aspect 配置切面</p><ul><li>id： 给切面提供一个唯一标识。</li><li>ref： 引用配置好的通知类 bean 的 id</li></ul></li><li><p>在aop:aspect标签的内部使用对应标签来配置通知的类型</p><ul><li><p>aop:before：表示配置前置通知</p><ul><li>method：用于指定Logger类中哪个方法是前置通知</li><li>pointcut：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</li><li>pointcut-ref: 指定切入点表达式的id</li></ul></li><li><p>切入点表达式写法</p><pre><code>  关键字：execution(表达式)  表达式：      访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)  标准的表达式写法：      public void com.it.service.impl.AccountServiceImpl.saveAccount()  访问修饰符可以省略      void com.it.service.impl.AccountServiceImpl.saveAccount()  返回值可以使用通配符，表示任意返回值      * com.it.service.impl.AccountServiceImpl.saveAccount()  包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.      * *.*.*.*.AccountServiceImpl.saveAccount())  包名可以使用..表示当前包及其子包      * *..AccountServiceImpl.saveAccount()  类名和方法名都可以使用*来实现通配      * *..*.*()  参数列表：      可以直接写数据类型：          基本类型直接写名称           int          引用类型写包名.类名的方式   java.lang.String      可以使用通配符表示任意类型，但是必须有参数      可以使用..表示有无参数均可，有参数可以是任意类型  全通配写法：      * *..*.*(..)  实际开发中切入点表达式的通常写法：      切到业务层实现类下的所有方法          * com.it.service.impl.*.*(..)</code></pre></li></ul></li><li><p>环绕通知</p><ul><li>环绕通知需要有明确的切入点方法调用</li><li>是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式</li><li>Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。</li><li>proceed()方法所需要的参数可以通过该接口的getArgs()方法获得</li></ul></li><li><p>例子</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置srping的Ioc,把service对象配置进来--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.it.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置Logger类（通知类） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.it.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置AOP--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容      此标签写在aop:aspect标签内部只能当前切面使用。      它还可以写在aop:aspect外面，此时就变成了所有切面可用      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.it.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置切面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置前置通知：在切入点方法执行之前执行        &lt;aop:before method="beforePrintLog" pointcut-ref="pt1" >&lt;/aop:before>        &lt;aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))">&lt;/aop:before>--></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个        &lt;aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1">&lt;/aop:after-returning>--></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个        &lt;aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1">&lt;/aop:after-throwing>--></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行        &lt;aop:after method="afterPrintLog" pointcut-ref="pt1">&lt;/aop:after>--></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置环绕通知 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPringLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>  </code></pre></li></ol><h2 id="11-Spring中基于注解的AOP配置"><a href="#11-Spring中基于注解的AOP配置" class="headerlink" title="11. Spring中基于注解的AOP配置"></a>11. Spring中基于注解的AOP配置</h2><ol><li><p>配置文件中导入context的名称空间  </p><pre><code> ```xml</code></pre> <!--?xml version="1.0" encoding="UTF-8"?--><pre><code> &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;/beans&gt;</code></pre><pre><code></code></pre></li></ol><ol start="2"><li><p>把相关的资源使用注解配置</p><ol><li><p>通知类使用@Component(Logger)配置</p></li><li><p>通知类上使用@Aspect 注解声明为切面</p></li><li><p>在增强的方法上使用注解配置通知</p><ol><li><p>@Before()</p></li><li><p>@AfterReturning()</p></li><li><p>@AfterThrowing()</p></li><li><p>@After()</p><blockquote><p>属性均为value：用于指定切入点或指定切入点表达式的引用<br>spring中存在对这四个注解的调用顺序的问题，会先调用最终通知在调用后置或异常通知，环绕通知没有问题 </p></blockquote></li><li><p>@Around()</p><blockquote><p>注解引用pt表达式</p></blockquote><p> @Pointcut(“execution(* com.itheima.service.impl.<em>.</em>(..))”)<br> private void pt1() {}</p><p> @Around(“pt1()”)</p></li></ol></li></ol></li><li><p>在配置文件中指定spring要扫描的包  </p><pre><code> `&lt;context:component-scan base-package="com.it"&gt;&lt;/context:component-scan&gt;`</code></pre></li><li><p>在 spring 配置文件中开启 spring 对注解 AOP 的支持  </p><pre><code> `&lt;aop:aspectj-autoproxy/&gt;`</code></pre><blockquote><p>不使用xml的配置方式时：  </p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.itheima"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@EnableAspectJAutoProxy</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre></li></ol><p>​                        </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
            <tag> IOC </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建github博客并绑定域名</title>
      <link href="/2019/12/10/shi-yong-hexo-da-jian-github-bo-ke-bing-bang-ding-yu-ming/"/>
      <url>/2019/12/10/shi-yong-hexo-da-jian-github-bo-ke-bing-bang-ding-yu-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-github-搭建博客"><a href="#hexo-github-搭建博客" class="headerlink" title="hexo + github 搭建博客"></a>hexo + github 搭建博客</h1><h2 id="1-创建github个人仓库"><a href="#1-创建github个人仓库" class="headerlink" title="1.创建github个人仓库"></a>1.创建github个人仓库</h2><ol><li>登录到GitHub，点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个用户名使用你的GitHub帐号名称代替，固定写法</li></ol><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><ol><li><p>在Git Bash中设置user.name和user.email配置信息：</p><pre><code> git config --global user.name "你的GitHub用户名" git config --global user.email "你的GitHub注册邮箱"</code></pre></li><li><p>生成ssh密钥文件：</p><p> <code>ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></p></li><li><p>然后直接三个回车即可，默认不需要设置密码</p></li><li><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p></li><li><p>打开GitHub_Settings_keys 页面，新建new SSH Key</p><p> Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p></li><li><p>在Git Bash中检测GitHub公钥设置是否成功</p><p> <code>ssh git@github.com</code></p><p> 这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><ul><li>若设置成功后还是部署时还是需要输入用户名和密码，此时更改站点的配置文件_config.yml，改为<ul><li>repo: <a href="mailto:git@github.com">git@github.com</a>:用户名/用户名.github.io.git</li></ul></li></ul></li></ol><h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h2><ol><li>检测npm是否安装成功，在命令行中输入npm -v </li></ol><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><ol><li><p>在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p></li><li><p>使用npm命令安装Hexo，输入：</p><p> <code>npm install -g hexo-cli</code></p></li><li><p>安装完成后，初始化博客</p><p> <code>hexo init blog</code></p><p> 这里的命令都是作用在刚刚创建的Blog文件夹中</p></li><li><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><pre><code> hexo new test_my_site      hexo g hexo s</code></pre><p> 完成后，打开浏览器输入网址：<br> localhost:4000</p><p> 执行上述三条语句时可能出现 Usage: hexo <command>问题，此时按顺序输入下列语句后重新运行：</command></p><pre><code> cd xxx/blog 进入到安装目录blog下 npm install</code></pre></li><li><p>网站发布</p><ol><li><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站。在blog根目录里的_config.yml文件称为站点配置文件。将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><pre><code> deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git branch: master</code></pre></li><li><p>安装Git部署插件</p><pre><code>`npm install hexo-deployer-git --save`</code></pre></li><li><p>输入命令</p></li></ol><pre><code>    hexo clean     hexo g     hexo d</code></pre></li></ol><pre><code>4. 其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，此时你的博客已经上线了，可以在网络上被访问了。打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 http://xxxx.github.io </code></pre><h2 id="5-与域名绑定"><a href="#5-与域名绑定" class="headerlink" title="5.与域名绑定"></a>5.与域名绑定</h2><ol><li>购买域名</li><li>添加解析<ol><li>解析1<br>记录类型：CNAME<br>主机记录：www<br>记录值： 用户名.github.io</li><li>解析2<br>记录类型：CNAME<br>主机记录：@<br>记录值： 用户名.github.io </li></ol></li><li>github配置<ol><li>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</li></ol></li><li>本地配置<ol><li>进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。保存，命名为CNAME ，注意保存成所有文件而不是txt文件。</li></ol></li><li>重新发布</li></ol><pre><code>   hexo clean   hexo g   hexo d</code></pre><ul><li>此时就可以通过自己的域名进入到自己搭建的网站了。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
