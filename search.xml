<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring基本使用</title>
      <link href="/2019/12/12/spring-ji-ben-shi-yong/"/>
      <url>/2019/12/12/spring-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring初步学习"><a href="#Spring初步学习" class="headerlink" title="Spring初步学习"></a>Spring初步学习</h1><pre><code>1. Sring是什么？    - Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 SpringMVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。2. Spring的优势：    1. 方便解耦，简化开发    2. AOP编程的支持    3. 声明式事务的支持    4. 方便程序的测试    5. 方便集成各种优秀的框架    6. 降低 JavaEE API的使用难度- 什么是程序的耦合？    - 程序间的依赖关系        - 类之间的依赖        - 方法间的依赖    - 解耦        - 降低程序间的依赖关系    - 实际开发中        - 编译期不依赖，运行时才依赖    - 解耦的思路：        1. 使用反射来创建对象，而避免使用new关键字        2. 通过读取配置文件来获取要创建的对象全限定类名    - Bean: 在计算机英语中，有可重用组件的含义    - JavaBean: 用java语言编写的可重用组件   javabean&gt;实体类    - 一个创建Bean对象的工厂： 创建service和dao对象        1. 需要一个配置文件配置service和dao  （xml或者properties）            - 配置内容：唯一标识=全限定类名（key=value）        2. 通过读取配置文件中的配置内容，反射创建对象    - IOC（Inverse Of Control：控制反转）        - 把创建对象的权利交给框架，是框架的重要特征        - 作用：削减程序间的耦合3. 使用spring的IOC解决程序耦合    1. 在maven工程的配置文件中导入spring依赖    2. 在资源根目录下创建xml文件    3. 让spring管理资源，在xml配置文件中配置service和dao    4. 测试使用：        1. 获取核心容器容器        `ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");`        2. 根据 bean 的 id 获取对象        ```        IAccountService aService = (IAccountService) ac.getBean("accountService");        //IAccountService aService = ac.getBean("accountService",IAccountDao.class);        System.out.println(aService);        IAccountDao aDao = (IAccountDao) ac.getBean("accountDao");        System.out.println(aDao);        ```        3. 执行所需执行的方法    - ApplicationContext的三个常用实现类        - ClassPathXmlApplicationContext：            - 从类的根路径下加载配置文件        - FileSystemXmlApplicationContext：            - 从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置        - AnnotationConfigApplicationContext:            - 使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解    - 核心容器的两个接口引发出的问题        - BeanFactory：单列对象适用 （常用）            - 创建对象采取的策略是延迟加载的方式。什么使用什么时候创建对象。（        - ApplicationContext：多例对象适用            - 创建对象采取的策略是立即加载的方式。只要一读取配置文件，默认情况下马上就会创建配置文件中配置的对象。4. spring对Bean的管理细节    1. bean 标签        - 作用：用于配置对象让 spring 来创建的。默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。        - 属性：            - id： 给对象在容器中提供一个唯一标识。用于获取对象。            - class： 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。            - scope： 指定对象的作用范围。            - init-method： 指定类中的初始化方法名称。            - destroy-method： 指定类中销毁方法名称。    2. 创建Bean的三种方式（sping配置文件中）        1. 使用默认构造函数创建            - 在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时             - 它会根据默认无参构造函数来创建类对象。如果 bean 中没有默认无参构造函数，将会创建失败            `&lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"/&gt;`        2. 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）            - 先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法            - factory-bean 属性：用于指定实例工厂 bean 的 id。            - factory-method 属性：用于指定实例工厂中创建对象的方法。            ```            InstanceFactory.java            /**            * 模拟一个实例工厂，创建业务层实现类            * 此工厂创建对象，必须现有工厂实例对象，再调用方法            */            public class InstanceFactory {            public IAccountService createAccountService(){            return new AccountServiceImpl();            }            }            ```            ```            spring xml配置文件            &lt;bean id="instancFactory" class="com.itheima.factory.InstanceFactory"&gt;&lt;/bean&gt;            &lt;bean id="accountService"            factory-bean="instancFactory"            factory-method="createAccountService"&gt;&lt;/bean&gt;            ```        3. 使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）            - 先把工厂的创建交给 spring 来管理。然后在使用工厂的 bean 来调用里面的方法            - factory-bean 属性：用于指定实例工厂 bean 的 id。            - factory-method 属性：用于指定实例工厂中创建对象的方法。            ```            StaticFactory.java            /**            * 模拟一个实例工厂，创建业务层实现类            * 此工厂创建对象，必须现有工厂实例对象，再调用方法            */            public class StaticFactory {            public static IAccountService createAccountService(){            return new AccountServiceImpl();            }            }            ```            ```            spring xml配置文件            &lt;bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="createAccountService"&gt;&lt;/bean&gt;            ```    3. bean的作用范围：        1. bean标签的scope属性：            - singleton：单例值（默认值） 一个应用只有一个对象的实例。它的作用范围就是整个引用            - prototype：多例的 每次访问对象时，都会重新创建对象实例            - request：作用于web应用的请求范围            - session：作用于web应用的会话范围            - global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session    4. bean对象的生命周期：        1. 单例对象： scope="singleton"            - 一个应用只有一个对象的实例。它的作用范围就是整个引用。            - 生命周期：                - 对象出生：当应用加载，创建容器时，对象就被创建了。                - 对象活着：只要容器在，对象一直活着。                - 对象死亡：当应用卸载，销毁容器时，对象就被销毁了。        2. 多例对象： scope="prototype"            - 每次访问对象时，都会重新创建对象实例。            - 生命周期：                - 对象出生：当使用对象时，创建新的对象实例。                - 对象活着：只要对象在使用中，就一直活着。                - 对象死亡：当对象长时间不用时，且没有被别的对象引用时，被java的垃圾回收器回收了。5. spring中的依赖注入（Dependency Injection)    1. 基本概念        - 依赖注入： Dependency Injection。 它是 spring 框架核心 ioc 的具体实现。        - 我们的程序在编写时，通过控制反转，把对象的创建交给了spring，但是代码中不可能出现没有依赖的情况。ioc解耦只是降低他们的依赖关系，但不会消除。例如：我们的业务层仍会调用持久层的方法。那这种业务层和持久层的依赖关系，在使用 spring 之后，就让spring来维护了。简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。    2. 依赖关系的管理：交给spring来维护。当当前类需要用到其他类的对象时，由spring为我们提供，我们只需要在配置文件中说明    3. 依赖关系的维护就称之为依赖注入    4. 依赖注入能注入的数据：（三类）        1. 基本类型和String        2. 其他bean类型（配置文件中或者注解配置过的bean）        3. 复杂类型/集合类型    5. 依赖注入的方式（三种）        1. 使用构造函数提供            - 使用类中的构造函数，给成员变量赋值。注意，赋值的操作不是我们自己做的，而是通过配置的方式，让spring框架来为我们注入            ```                                &lt;!-- 使用构造函数的方式，给 service 中的属性传值                要求：                    类中需要提供一个对应参数列表的构造函数。                涉及的标签：                    constructor-arg                属性：                    index:指定参数在构造函数参数列表的索引位置                    type:指定参数在构造函数中的数据类型                    name:指定参数在构造函数中的名称 用这个找给谁赋值                    =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============                    value:它能赋的值是基本数据类型和String类型                    ref:它能赋的值是其他 bean 类型，也就是说，必须得是在spring配置文件中配置过的 bean                优势：获取bean对象时，注入数据是必须的操作，否则对象无法创建成功                弊端：改变了bean对象的实例化方式，使在创建对象时，如果用不到这些数据，也必须提供                --&gt;                &lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"&gt;                    &lt;constructor-arg name="name" value="张三"&gt;&lt;/constructor-arg&gt;                    &lt;constructor-arg name="age" value="18"&gt;&lt;/constructor-arg&gt;                    &lt;constructor-arg name="birthday" ref="now"&gt;&lt;/constructor-arg&gt;                &lt;/bean&gt;                &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;            ```        2. 使用set方法提供（实际开发中，此种方式用的较多）            - 在类中提供需要注入成员的 set 方法。            ```                                &lt;!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式                涉及的标签：                    property                属性：                    name：找的是类中 set 方法后面的部分                    ref：给属性赋值是其他 bean 类型的                    value：给属性赋值是基本数据类型和 string 类型的                优势：创建对象时，没有明确的限制，可以直接使用默认构造函数                弊端：如果有某个成员必须有值，则获取对象是有可能set方法没有执行                --&gt;                &lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"&gt;                    &lt;property name="name" value="test"&gt;&lt;/property&gt;                    &lt;property name="age" value="21"&gt;&lt;/property&gt;                    &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;                &lt;/bean&gt;                &lt;bean id="now" class="java.util.Date"&gt;&lt;/bean&gt;            ```            - 集合类型数据的注入（只能使用构造函数和set方式两种方法）                - set方法                ```                    &lt;!-- 注入集合数据                    List 结构的：                    array,list,set                    Map 结构的                    map,entry,props,prop                    --&gt;                    &lt;bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"&gt;                    &lt;!-- 在注入集合数据时，只要结构相同，标签可以互换 --&gt;                    &lt;!-- 给数组注入数据 --&gt;                    &lt;property name="myStrs"&gt;                    &lt;set&gt;                    &lt;value&gt;AAA&lt;/value&gt;                    &lt;value&gt;BBB&lt;/value&gt;                    &lt;value&gt;CCC&lt;/value&gt;                    &lt;/set&gt;                    &lt;/property&gt;                    &lt;!-- 注入 list 集合数据 --&gt;                    &lt;property name="myList"&gt;                    &lt;array&gt;                    &lt;value&gt;AAA&lt;/value&gt;                    &lt;value&gt;BBB&lt;/value&gt;                    &lt;value&gt;CCC&lt;/value&gt;                    &lt;/array&gt;                    &lt;/property&gt;                    &lt;!-- 注入 set 集合数据 --&gt;                    &lt;property name="mySet"&gt;                    &lt;list&gt;                    &lt;value&gt;AAA&lt;/value&gt;                    &lt;value&gt;BBB&lt;/value&gt;                    &lt;value&gt;CCC&lt;/value&gt;                    &lt;/list&gt;                    &lt;/property&gt;                    &lt;!-- 注入 Map 数据 --&gt;                    &lt;property name="myMap"&gt;                    &lt;props&gt;                    &lt;prop key="testA"&gt;aaa&lt;/prop&gt;                    &lt;prop key="testB"&gt;bbb&lt;/prop&gt;                    &lt;/props&gt;                    &lt;/property&gt;                    &lt;!-- 注入 properties 数据 --&gt;                    &lt;property name="myProps"&gt;                    &lt;map&gt;                    &lt;entry key="testA" value="aaa"&gt;&lt;/entry&gt;                    &lt;entry key="testB"&gt;                    &lt;value&gt;bbb&lt;/value&gt;                    &lt;/entry&gt;                    &lt;/map&gt;                    &lt;/property&gt;                    &lt;/bean&gt;                ```        3. 使用注解提供6. 基于注解的IOC配置    1. 环境：        - 创建spring的xml配置文件并开启对注解的支持            - 注意：基于注解整合时，导入约束时需要多导入一个 context 名称空间下的约束                 ```                &lt;?xml version="1.0" encoding="UTF-8"?&gt;                &lt;beans xmlns="http://www.springframework.org/schema/beans"                xmlns:context="http://www.springframework.org/schema/context"                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                xsi:schemaLocation="http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/context/spring-context.xsd"&gt;                &lt;!-- 告知 spring 创建容器时要扫描的包  --&gt;                &lt;context:component-scan base-package="com.itheima"&gt;&lt;/context:component-scan&gt;                &lt;!-- 配置 dbAssit --&gt;                &lt;bean id="dbAssit" class="com.itheima.dbassit.DBAssit"&gt;                &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;                &lt;/bean&gt;                &lt;!-- 配置数据源 --&gt;                &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;                &lt;property name="driverClass" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt;                &lt;property name="jdbcUrl" value="jdbc:mysql:///spring_day02"&gt;&lt;/property&gt;                &lt;property name="user" value="root"&gt;&lt;/property&gt;                &lt;property name="password" value="1234"&gt;&lt;/property&gt;                &lt;/bean&gt;                &lt;/beans&gt;                ```            2. 常用的IOC注解按照作用分类        - 用于创建对象的            - 类似于xml配置文件中的&lt;bean&gt;标签            - @Component：                - 作用：用于把当前类对象存入spring容器中                - 属性：value：用于指定bean的id，当我们不写时，它的默认值是当前类名，且首字母小写            - @Controller：一般用在表现层            - @Service：一般用在业务层            - @Repository：一般用在持久层            - 以上三个注解的作用和属性和@Component是一模一样的。            - 它们三个是spring框架为我们提供明确的三层使用的注解，使三层架构对象更为清晰        - 用于注入数据的            - 类似于xml配置文件中&lt;bean&gt;标签中的&lt;property&gt;            - @Autowired:                - 作用：自动按照类型注入。                    - 只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可注入成功。                    - 若IOC容器中没有匹配到，则报错                    - 若IOC容器中有多个类型匹配时，可能会报错                - 位置：变量，方法上            - @Qualifier：                - 作用：在自动按照类型注入的基础之上，再按照 Bean的id 注入。它在给类成员注入时不能独立使用，必须和@Autowire 一起使用；但是给方法参数注入时，可以独立使用。            - Resource：                - 作用：直接按照 Bean 的 id 注入。它也只能注入其他 bean 类型                - 属性：    name：指定 bean 的 id。            - 注意： 以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现，另外，集合类型的注入只能通过xml来实现            - @Value                - 作用：注入基本数据类型和string类型数据                - 属性：value：用于指定数据的值。它可以使用spring中的SpEL（也就是spring中的el表达式）        - 用于改变作用范围的            - 类似于xml配置文件中&lt;bean&gt;标签中的&lt;scope&gt;            - @Scope                - 作用：指定 bean 的作用范围。                - 属性：value：指定范围的值。取值： singleton prototype request session globalsession        - 和生命周期相关的            - 类似于xml配置文件中&lt;bean&gt;标签中的init-method和destroy-methode的作用是一样的            - @PostConstruct                - 作用：用于指定初始化方法。            - @PreDestroy                - 作用：用于指定销毁方法。    3. spring的新注解（使spring脱离xml配置文件）        - @Configuration            - 作用：用于指定当前类是一个 spring 配置类， 当创建容器时会从该类上加载注解。 获取容器时需要使用AnnotationApplicationContext(有@Configuration 注解的类.class)。            - 属性：value:用于指定配置类的字节码            - 当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写        - @ComponentScan            - 作用：用于指定 spring 在初始化容器时要扫描的包。 作用和在 spring 的 xml 配置文件中的：&lt;context:component-scan base-package="com.itheima"/&gt;是一样的。            - 属性：basePackages：用于指定要扫描的包。和该注解中的 value 属性作用一样。        - @Bean            - 作用：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。            - 属性：name：给当前@Bean 注解方法创建的对象指定一个名称(即 bean 的 id）。            - 当使用注解配置方法时，如果方法有参数，spring框架回去容器中查找有没有可用的bean对象，查找的方式和Autowired注解的作用是一样的        - @Import            - 作用：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration 注解。写上也没问题            - 属性：value[]：用于指定其他配置类的字节码。            - 有@Import注解的类是父配置类，导入的类都是子配置类        - @PropertySource            - 作用：用于加载.properties 文件中的配置。例如配置数据源时，可以把连接数据库的信息写到properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。            - 属性：value[]：用于指定 properties 文件位置。如果是在类路径下，需要写上 classpath:    4. 注解和xml的选择            ![注解和xml的选择](https://i.imgur.com/dFAZVUb.png)7. spring整合junit配置    1. 导入spring整合junit的jar（坐标）    2. 使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的        - @Runwith        - `@RunWith(SpringJUnit4ClassRunner.class)`    3. 告知spring的运行器，spring的IOC创建是基于XML还是注解的，并说明位置        - @ContextConfiguration()            - locations 属性： 用于指定配置文件的位置。如果是类路径下，需要用 classpath:表明            - classes 属性： 用于指定注解的类。当不使用 xml 配置时，需要用此属性指定注解类的位置        ```        @RunWith(SpringJUnit4ClassRunner.class)        @ContextConfiguration(locations= {"classpath:bean.xml"})        ``` </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
